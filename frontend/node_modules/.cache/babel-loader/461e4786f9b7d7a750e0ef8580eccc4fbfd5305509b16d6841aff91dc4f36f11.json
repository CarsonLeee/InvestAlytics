{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\carso\\\\OneDrive\\\\Desktop\\\\Projects\\\\Stock Analyzer\\\\frontend\\\\src\\\\Stock.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { Line } from 'react-chartjs-2';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Stock = ({\n  selectedStock\n}) => {\n  _s();\n  const [stockData, setStockData] = useState({});\n  console.log(\"Rendering Search component\");\n  useEffect(() => {\n    const apiKey = 'RR9BO1ZV4RXNJFJF'; // Your Alpha Vantage API Key\n    const url = `https://www.alphavantage.co/query?function=TIME_SERIES_DAILY&symbol=${selectedStock}&apikey=${apiKey}`;\n    axios.get(url).then(response => {\n      if (response.data['Time Series (Daily)']) {\n        const chartData = parseChartData(response.data['Time Series (Daily)']);\n        setStockData(chartData);\n      }\n    }).catch(error => console.error(\"Error fetching stock time series data: \", error));\n  }, [selectedStock]);\n  const parseChartData = timeSeries => {\n    const chartData = {\n      labels: [],\n      datasets: [{\n        label: `${selectedStock} Stock Price`,\n        data: [],\n        borderColor: 'rgba(75,192,192,1)',\n        fill: false\n      }]\n    };\n    for (let [date, data] of Object.entries(timeSeries).slice(0, 30).reverse()) {\n      chartData.labels.push(date);\n      chartData.datasets[0].data.push(data['4. close']);\n    }\n    return chartData;\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: [selectedStock, \" Stock Chart\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Line, {\n      data: stockData\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 43,\n    columnNumber: 5\n  }, this);\n};\n_s(Stock, \"BHuvQ4XYvo5Ee0zAwrJOKRDf2Ms=\");\n_c = Stock;\nexport default Stock;\nvar _c;\n$RefreshReg$(_c, \"Stock\");","map":{"version":3,"names":["React","useState","useEffect","axios","Line","jsxDEV","_jsxDEV","Stock","selectedStock","_s","stockData","setStockData","console","log","apiKey","url","get","then","response","data","chartData","parseChartData","catch","error","timeSeries","labels","datasets","label","borderColor","fill","date","Object","entries","slice","reverse","push","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/carso/OneDrive/Desktop/Projects/Stock Analyzer/frontend/src/Stock.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\nimport { Line } from 'react-chartjs-2';\r\n\r\nconst Stock = ({ selectedStock }) => {\r\n  const [stockData, setStockData] = useState({});\r\n  console.log(\"Rendering Search component\");\r\n\r\n  useEffect(() => {\r\n    const apiKey = 'RR9BO1ZV4RXNJFJF'; // Your Alpha Vantage API Key\r\n    const url = `https://www.alphavantage.co/query?function=TIME_SERIES_DAILY&symbol=${selectedStock}&apikey=${apiKey}`;\r\n\r\n    axios.get(url)\r\n      .then(response => {\r\n        if (response.data['Time Series (Daily)']) {\r\n          const chartData = parseChartData(response.data['Time Series (Daily)']);\r\n          setStockData(chartData);\r\n        }\r\n      })\r\n      .catch(error => console.error(\"Error fetching stock time series data: \", error));\r\n  }, [selectedStock]);\r\n\r\n  const parseChartData = (timeSeries) => {\r\n    const chartData = {\r\n      labels: [],\r\n      datasets: [{\r\n        label: `${selectedStock} Stock Price`,\r\n        data: [],\r\n        borderColor: 'rgba(75,192,192,1)',\r\n        fill: false,\r\n      }]\r\n    };\r\n\r\n    for (let [date, data] of Object.entries(timeSeries).slice(0, 30).reverse()) {\r\n      chartData.labels.push(date);\r\n      chartData.datasets[0].data.push(data['4. close']);\r\n    }\r\n\r\n    return chartData;\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <h2>{selectedStock} Stock Chart</h2>\r\n      <Line data={stockData} />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Stock;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAOC,KAAK,MAAM,OAAO;AACzB,SAASC,IAAI,QAAQ,iBAAiB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEvC,MAAMC,KAAK,GAAGA,CAAC;EAAEC;AAAc,CAAC,KAAK;EAAAC,EAAA;EACnC,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAGV,QAAQ,CAAC,CAAC,CAAC,CAAC;EAC9CW,OAAO,CAACC,GAAG,CAAC,4BAA4B,CAAC;EAEzCX,SAAS,CAAC,MAAM;IACd,MAAMY,MAAM,GAAG,kBAAkB,CAAC,CAAC;IACnC,MAAMC,GAAG,GAAI,uEAAsEP,aAAc,WAAUM,MAAO,EAAC;IAEnHX,KAAK,CAACa,GAAG,CAACD,GAAG,CAAC,CACXE,IAAI,CAACC,QAAQ,IAAI;MAChB,IAAIA,QAAQ,CAACC,IAAI,CAAC,qBAAqB,CAAC,EAAE;QACxC,MAAMC,SAAS,GAAGC,cAAc,CAACH,QAAQ,CAACC,IAAI,CAAC,qBAAqB,CAAC,CAAC;QACtER,YAAY,CAACS,SAAS,CAAC;MACzB;IACF,CAAC,CAAC,CACDE,KAAK,CAACC,KAAK,IAAIX,OAAO,CAACW,KAAK,CAAC,yCAAyC,EAAEA,KAAK,CAAC,CAAC;EACpF,CAAC,EAAE,CAACf,aAAa,CAAC,CAAC;EAEnB,MAAMa,cAAc,GAAIG,UAAU,IAAK;IACrC,MAAMJ,SAAS,GAAG;MAChBK,MAAM,EAAE,EAAE;MACVC,QAAQ,EAAE,CAAC;QACTC,KAAK,EAAG,GAAEnB,aAAc,cAAa;QACrCW,IAAI,EAAE,EAAE;QACRS,WAAW,EAAE,oBAAoB;QACjCC,IAAI,EAAE;MACR,CAAC;IACH,CAAC;IAED,KAAK,IAAI,CAACC,IAAI,EAAEX,IAAI,CAAC,IAAIY,MAAM,CAACC,OAAO,CAACR,UAAU,CAAC,CAACS,KAAK,CAAC,CAAC,EAAE,EAAE,CAAC,CAACC,OAAO,CAAC,CAAC,EAAE;MAC1Ed,SAAS,CAACK,MAAM,CAACU,IAAI,CAACL,IAAI,CAAC;MAC3BV,SAAS,CAACM,QAAQ,CAAC,CAAC,CAAC,CAACP,IAAI,CAACgB,IAAI,CAAChB,IAAI,CAAC,UAAU,CAAC,CAAC;IACnD;IAEA,OAAOC,SAAS;EAClB,CAAC;EAED,oBACEd,OAAA;IAAA8B,QAAA,gBACE9B,OAAA;MAAA8B,QAAA,GAAK5B,aAAa,EAAC,cAAY;IAAA;MAAA6B,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eACpClC,OAAA,CAACF,IAAI;MAACe,IAAI,EAAET;IAAU;MAAA2B,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACtB,CAAC;AAEV,CAAC;AAAC/B,EAAA,CA3CIF,KAAK;AAAAkC,EAAA,GAALlC,KAAK;AA6CX,eAAeA,KAAK;AAAC,IAAAkC,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}